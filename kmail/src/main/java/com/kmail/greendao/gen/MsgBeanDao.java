package com.kmail.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tk.kmail.model.db_bean.MsgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_BEAN".
*/
public class MsgBeanDao extends AbstractDao<MsgBean, Long> {

    public static final String TABLENAME = "MSG_BEAN";

    /**
     * Properties of entity MsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Dec = new Property(4, String.class, "dec", false, "DEC");
        public final static Property ClassName = new Property(5, String.class, "className", false, "CLASS_NAME");
        public final static Property SendTime = new Property(6, java.util.Date.class, "sendTime", false, "SEND_TIME");
        public final static Property Flag = new Property(7, int.class, "flag", false, "FLAG");
    }


    public MsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"CONTENT\" TEXT," + // 2: content
                "\"TITLE\" TEXT," + // 3: title
                "\"DEC\" TEXT," + // 4: dec
                "\"CLASS_NAME\" TEXT," + // 5: className
                "\"SEND_TIME\" INTEGER," + // 6: sendTime
                "\"FLAG\" INTEGER NOT NULL );"); // 7: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String dec = entity.getDec();
        if (dec != null) {
            stmt.bindString(5, dec);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(6, className);
        }
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(7, sendTime.getTime());
        }
        stmt.bindLong(8, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String dec = entity.getDec();
        if (dec != null) {
            stmt.bindString(5, dec);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(6, className);
        }
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(7, sendTime.getTime());
        }
        stmt.bindLong(8, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgBean readEntity(Cursor cursor, int offset) {
        MsgBean entity = new MsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dec
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // className
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // sendTime
            cursor.getInt(offset + 7) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDec(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClassName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setFlag(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
